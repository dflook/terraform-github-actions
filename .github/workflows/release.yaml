name: Release

on:
  release:
    types: [released]

jobs:
  image:
    runs-on: ubuntu-latest
    name: Publish Docker Image
    env:
      DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build base image
        id: docker_build_base
        uses: docker/build-push-action@v2
        with:
          file: image/Dockerfile-base
          context: image
          push: false
          tags: danielflook/terraform-github-actions-base:latest

      - name: Base image digest
        run: echo ${{ steps.docker_build_base.outputs.digest }}

      - name: Build release image
        id: docker_build_release
        uses: docker/build-push-action@v2
        with:
          file: Dockerfile
          context: image
          push: true
          labels: |
            org.opencontainers.image.created="$(date '+%Y-%m-%dT%H:%M:%S%z')"
            org.opencontainers.image.source="https://github.com/${{ github.repository }}"
            org.opencontainers.image.revision="${{ github.sha }}"
            org.opencontainers.image.version="${{ github.event.release.tag_name }}"
            vcs-ref="${{ github.event.release.tag_name }}"
            build="$GITHUB_RUN_ID"
          tags: |
            ghcr.io/dflook/terraform-github-actions:${{ github.event.release.tag_name }}
            danielflook/terraform-github-actions:${{ github.event.release.tag_name }}

      - name: Release image digest
        run: echo ${{ steps.docker_build_release.outputs.digest }}

  release_actions:
    runs-on: ubuntu-latest
    name: Release Actions
    env:
      GITHUB_TOKEN: ${{ secrets.RELEASE_GITHUB_TOKEN }}
      DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
    needs: image
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Action image
        run: |
          export RELEASE_TAG=$(cat $GITHUB_EVENT_PATH | jq -r  '.release.tag_name' $GITHUB_EVENT_PATH)

          git config --global user.name "Daniel Flook"
          git config --global user.email "daniel@flook.org"

          for action in $(find . -name action.yaml -printf "%h\n" | sed 's/^.\///'); do

            if git clone https://dflook:$GITHUB_TOKEN@github.com/dflook/$action.git "$HOME/$action"; then
              echo "Releasing dflook/$action@$RELEASE_TAG"

              rsync -r $action/ $HOME/$action

              sed -i "s|../image/Dockerfile|docker://danielflook/terraform-github-actions:$RELEASE_TAG|" $HOME/$action/action.yaml

              export major=`echo $RELEASE_TAG | cut -d. -f1`
              export minor=`echo $RELEASE_TAG | cut -d. -f2`

              (cd "$HOME/$action" \
               && git add -A \
               && git commit -m "$RELEASE_TAG" \
               && git tag --force -a -m"$RELEASE_TAG" "$RELEASE_TAG" \
               && git tag --force -a -m"$RELEASE_TAG" "$major" \
               && git tag --force -a -m"$RELEASE_TAG" "$major.$minor" \
               && git push --force \
               && git push --force --tags
              )

              cat .github/release_template.md \
               | envsubst \
               | jq --slurp --raw-input --arg RELEASE_TAG "$RELEASE_TAG" '{"tag_name": $RELEASE_TAG, "name": $RELEASE_TAG, "body": . }' \
               | curl -X POST \
                   --user dflook:$GITHUB_TOKEN \
                   --header "Content-Type: application/json" \
                   --data-binary @- \
                   "https://api.github.com/repos/dflook/$action/releases"

            else
              echo "Skipping $action"
            fi
          done
