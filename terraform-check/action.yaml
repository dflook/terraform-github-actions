name: terraform-check
description: Check if there are Terraform changes to apply
author: Daniel Flook

inputs:
  path:
    description: Path to the Terraform root module to check
    required: false
    default: "."
  workspace:
    description: Terraform workspace to run the plan in
    required: false
    default: "default"
  variables:
    description: |
      Variables to set for the terraform plan. This should be valid Terraform syntax - like a [variable definition file](https://developer.hashicorp.com/terraform/language/values/variables#variable-definitions-tfvars-files).

      Variables set here override any given in `var_file`s.
    required: false
  var_file:
    description: |
      List of tfvars files to use, one per line.
      Paths should be relative to the GitHub Actions workspace
    required: false
  backend_config:
    description: List of Terraform backend config values, one per line.
    required: false
    default: ""
  backend_config_file:
    description: |
      List of Terraform backend config files to use, one per line.
      Paths should be relative to the GitHub Actions workspace
    required: false
    default: ""
  parallelism:
    description: Limit the number of concurrent operations
    required: false
    default: "0"

outputs:
  failure-reason:
    description: |
      When the job outcome is `failure` because the there are outstanding changes to apply, this will be set to 'changes-to-apply'.
      If the job fails for any other reason this will not be set.
      This can be used with the Actions expression syntax to conditionally run a step when there are changes to apply.

runs:
  using: docker
  image: ../image/Dockerfile
  entrypoint: /entrypoints/check.sh

branding:
  icon: globe
  color: purple
